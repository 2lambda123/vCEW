# -*- coding: utf-8 -*-
""""
Created on Thu Aug  9 19:54:15 2018 
@author: Radar_Jamming_Laboratory. 204-{Shixun You}

"""
import util
import resources
import counterPhy

#import pyglet
import numpy as np
import numpy.random as npr

"Generate countermeasure objects with random positions"

PIX_PRO = 0.025 # 25x25 m2 =1 pixel

MAP_CENTER = np.array([300, 300]) 

PLAYER_TYPE = {
               'Default'      : resources.default_image,
               'Station'      : resources.station_image,
               'UCAV'         : resources.UCAV_image,
               'Missile'      : resources.missile_image
}

def playerGenerate(
                   _type=None, 
                   _id=None,
                   father=None, 
                   site=None,                     
                   batch=None, 
                   group=None
    ):
    
    if _id is None: _id = 1
    
    if site is None: site = util.locationRandom(MAP_CENTER)[0]
    
    if _type is 'Station':
        
        player = counterPhy.CounterPhy(
                                       img=PLAYER_TYPE[_type], 
                                       x=site[0], 
                                       y=site[1], 
                                       batch=batch, 
                                       group=group
        )
                  
    elif _type is 'UCAV':
        
        player = counterPhy.CounterPhy(
                                       img=PLAYER_TYPE[_type], 
                                       x=site[0], 
                                       y=site[1], 
                                       batch=batch, 
                                       group=group
        )
                                   
    elif _type is 'Missile':
        
        player = counterPhy.CounterPhy(
                                       img=PLAYER_TYPE[_type], 
                                       x=father.x, 
                                       y=father.y, 
                                       batch=father.batch, 
                                       group=father.group
        )   
        
    player.init_type(_type=_type, father=father)
#        player.pointState.append(np.concatenate((player.spherePos[0:2], [player.h.real])))                  
    player._id = _id
    
    return player

""                                                                           ""
"""---------------------------------test fuction----------------------------"""
""                                                                           ""  
if __name__ == '__main__':
    
    player = playerGenerate(_type='UCAV', _id=1)
         
